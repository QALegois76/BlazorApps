@page "/simon"
@using Minigames.Component
@using MudBlazor
@inject NavigationManager Navigation
@inject IDialogService DialogService
@inject IJSRuntime JS




<MudPaper Class="pa-4" id="paperSimon" style="@gridStyle">
    <MudText Typo="Typo.h5" Class="mb-2">Jeu de Simon</MudText>
    <MudText Typo="Typo.h6" Class="mb-2">Code : @_actualCode</MudText>
    <br />
    <MudGrid Class="mb-3" >
        @foreach (var color in Colors)
        {
            var clr = color;
            <MudItem xs="6" sm="6">
                <MudPaper Elevation="4"
                Class="@GetClass(color)"
                Style="@GetStyle(color)"
                @onclick="@(() =>OnClickColor(clr))"
                />
            </MudItem>
        }
    </MudGrid>

    <MudButton OnClick="StartGame" class="btn-primary" Color="Color.Primary">Démarrer</MudButton>
</MudPaper>


<br />
<br />



<MudTimeline TimelineOrientation="TimelineOrientation.Horizontal" TimelinePosition="TimelinePosition.Bottom" Reverse="false">
    @for (int i = 0; i < Sequence.Count; i++)
    {
        var idx = i;
        <MudTimelineItem Color="GetColor(idx)" Variant="GetVarient(idx)">
            <ItemContent>
                <MudText >Step @idx</MudText>
            </ItemContent>
        </MudTimelineItem>


    }

</MudTimeline>


<script>
    window.playSound = (soundPath) => {
    //console.log("play sound "+soundPath);
    const audio = new Audio(soundPath);
    audio.play();
    };
</script>




@code {

    //Style="@GetStyle(color)"


    private List<ESimonColor> Colors = new() { ESimonColor.Red, ESimonColor.Yellow, ESimonColor.Blue, ESimonColor.Green };
    private List<ESimonColor> Sequence = new();
    private List<ESimonColor> UserInput = new();
    private int currentStep = 0;
    private bool isPlaying = false;
    private ESimonColor? activeColor;

    private bool _gameOverDialogOpen = false;

    private string _actualCode = "";
    private int idxCode = 0;
    private string gridStyle = NormalGridStyle;

    private const string NormalGridStyle = "border:solid 2px black";
    private const string CorrectGridStyle = "border:solid 5px green";
    private const string IncorrectGridStyle = "border:solid 5px green";

    private const string PATH_SOUND = "res/sounds/";
    private const string PATH_CORRECT = PATH_SOUND+"Correct2.mp3";
    private const string PATH_INCORRECT = PATH_SOUND+"incorect2.mp3";
    private const string FULL_CODE = "123";






    private async void StartGame()
    {
        UserInput.Clear();
        currentStep = 1;
        isPlaying = true;
        idxCode = 0;
        gridStyle = NormalGridStyle;

        if (Sequence.Count == 0)
            for (int i = 0; i < 8; i++)
                AddRandomColor();

        Console.WriteLine(string.Join(" - ", Sequence));


        await ShowSequence();
    }




    private void AddRandomColor()
    {
        var rnd = new Random();
        var color = Colors[rnd.Next(Colors.Count)];
        Sequence.Add(color);
    }

    private async Task ShowSequence()
    {
        _actualCode = FULL_CODE.Substring(0, Math.Min(idxCode, FULL_CODE.Length));
        for (int i =0; i<currentStep; i++)
        {
            var color = Sequence[i];
            await JS.InvokeVoidAsync("playSound", PATH_SOUND + color.ToString() + ".mp3");
            activeColor = color;
            StateHasChanged();
            await Task.Delay(600);
            activeColor = null;
            StateHasChanged();
            await Task.Delay(200);
        }
    }


    private async Task OnClickColor(ESimonColor color)
    {

        await JS.InvokeVoidAsync("playSound", PATH_SOUND+color.ToString()+".mp3");


        if (!isPlaying) return;
        UserInput.Add(color);

        if (color != Sequence[UserInput.Count - 1])
        {
            // Échec
            await JS.InvokeVoidAsync("playSound", PATH_INCORRECT);
            gridStyle = IncorrectGridStyle;
            StateHasChanged();

            var options = new DialogOptions { CloseOnEscapeKey = true };

            await DialogService.ShowAsync<DialogFailSimon>("Simple Dialog", options);
            StartGame();
            return;
        }

        Console.WriteLine("entry remaining : "+(currentStep- UserInput.Count));

        if (UserInput.Count == currentStep)
        {
            await JS.InvokeVoidAsync("playSound", PATH_CORRECT);
            gridStyle = CorrectGridStyle;
            StateHasChanged();
            await Task.Delay(500);
            gridStyle = NormalGridStyle;
            StateHasChanged();


            await Task.Delay(1000);
            if(UserInput.Count >=Sequence.Count)
                AddRandomColor();

            currentStep++;
            idxCode = 0;
            if (currentStep > 4)
                idxCode++;
            if (currentStep > 6)
                idxCode++;
            if (currentStep > 8)
                idxCode++;
            UserInput.Clear();
            await ShowSequence();
        }
    }





    private string GetStyle(ESimonColor color)
    {
        return $"background-color:{color};";
    }

    private string GetClass(ESimonColor color)
    {
        return "simon-button"+(activeColor == color ? "-activ":"");
    }

    private MudBlazor.Variant GetVarient(int idx)
    {
        return (idx > currentStep-1) ? Variant.Outlined : Variant.Filled;
    }

    private MudBlazor.Color GetColor(int idx)
    {
        if (idx < currentStep-1)
            return Color.Success;
        if (idx > currentStep-1)
            return Color.Info;
            return Color.Primary;
    }
}
