@inject IJSRuntime JS

<div class="simon-circle">
    @for (int i = 0; i < buttonClasses.Length; i++)
    {
        var index = i;
        <button class="simon-button @GetButtonClass(index)"
                @onclick="() => HandleClick(index)"
                disabled="@IsPlaying">@i</button>
    }
</div>

<script src="js/simon.js"></script>

@code {
    string[] buttonClasses = new[] { "top-left", "top-right", "bottom-left", "bottom-right" };
    string? activeClass;
    bool IsPlaying = false;

    async Task HandleClick(int index)
    {
        await PlayButton(index);
    }

    async Task PlayButton(int index)
    {
        Console.WriteLine("btn "+ index + " clicked so it's : "+buttonClasses[index]);
        activeClass = buttonClasses[index] + " active";
        StateHasChanged();
        await JS.InvokeVoidAsync("playSimonSound", index);
        await Task.Delay(500);

        activeClass = null;
        StateHasChanged();
    }

    string GetButtonClass(int index)
    {
        var baseClass = "simon-button " + buttonClasses[index];
        return activeClass == buttonClasses[index] + " active" ? baseClass + " active" : baseClass;
    }
}
